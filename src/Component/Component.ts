import {assert} from "../utils/assert";
import {RenderContext} from "../RenderContext/RenderContext";
import {IAttrs} from "../commons/IAttrs";
import {ISystemAttrs} from "../commons/ISystemAttrs";
import {vdom, IVirtualNode} from "../../vendor/cito";
import {IAttrChanged} from "../commons/IAttrChanged";
import {IRenderContext} from "../RenderContext/IRenderContext";
import {IRefs} from "../commons/IRefs";
import {addVirtualEventListener} from "../utils/citoEvents";
import {ADMINISTRATOR_KEY} from "../utils/componentKeys";
import {ComponentAdministrator} from "../ComponentAdministrator/ComponentAdministrator";
import {getActiveInstance, hasActiveInstance, popActiveInstance, pushActiveInstance} from "../Element/Element";
import {DevTools} from "../utils/devTools";

import {IComponent} from "./IComponent";

export abstract class Component<P extends object> implements IComponent {

	public readonly [ADMINISTRATOR_KEY];
	public readonly attrs: Partial<IAttrs<P> & ISystemAttrs>;

	public readonly attrChanged: Partial<IAttrChanged<P>> = {};
	public readonly defaults: Partial<IAttrs<P>> = {};
	public readonly refs: IRefs = {};

	constructor(attrs: Partial<IAttrs<P> & ISystemAttrs> = {}) {
		this[ADMINISTRATOR_KEY] = new ComponentAdministrator(this, attrs);

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ this[ADMINISTRATOR_KEY].initAttrs
	}

	public abstract render(): IVirtualNode;

	public forceUpdate(
		renderContext?: IRenderContext,
		{render} = {render: true},
	) {
		const mark = DevTools.mark(`üéì ${DevTools.getName(this)}: update`);

		const admin = this[ADMINISTRATOR_KEY];

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è, —Ç–æ –µ—Å—Ç—å –º—ã –¥–æ–ª–∂–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞—Ç—å
		// –æ—á–µ—Ä–µ–¥—å –Ω–∞ mount/update, –∞ –≤ –∫–æ–Ω—Ü–µ –µ—ë –≤—ã–ø–æ–ª–Ω–∏—Ç—å
		// –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç –Ω–∞—à—É –æ—á–µ—Ä–µ–¥—å
		const isTopLevelUpdate = !hasActiveInstance();

		if (!renderContext) {
			if (!isTopLevelUpdate) {
				renderContext = getActiveInstance()[ADMINISTRATOR_KEY].renderContext;

				// TODO: –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
				if (!renderContext) {
					renderContext = new RenderContext();
				}
			} else {
				renderContext = new RenderContext();
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –Ω–æ–¥—É (–¥–ª—è —Å–ª—É—á–∞—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞)
		const prevVirtualNode = admin.virtualNode;
		// –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
		this.createFragment(renderContext);

		if (prevVirtualNode) {
			assert(
				admin.virtualNode.tag === prevVirtualNode.tag,
				"Component cannot change it's root tag name",
			);

			// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–Ω–µ—à–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
			this[ADMINISTRATOR_KEY].initExternalEvents(this[ADMINISTRATOR_KEY].externalEvents);
		}

		assert(
			admin.virtualNode.tag !== undefined,
			"Fragments are not currently supported",
		);

		if (render) {
			// –ù–µ –∑–∞–±—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ didUpdate
			renderContext.scheduleUpdate(this);
		}

		if (render && isTopLevelUpdate && prevVirtualNode.dom) {
			// –û–±–Ω–æ–≤–ª—è–µ–º vdom
			vdom.update(prevVirtualNode, admin.virtualNode);
		}

		if (render && isTopLevelUpdate) {
			renderContext.fireAll();
		}

		mark.measure();
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
	 * @param type
	 * @param detail
	 */
	public broadcast(type: string, detail?: any) {
		const mark = DevTools.mark(`üéì ${DevTools.getName(this)}: broadcast`);

		const admin = this[ADMINISTRATOR_KEY];

		assert(
			admin.virtualNode.dom,
			"Cannot emit event on an unmounted component.",
		);

		admin.virtualNode.dom.dispatchEvent(
			new CustomEvent(type.toLowerCase(), {
				bubbles: false,
				detail,
			}),
		);

		mark.measure();
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—é—â–∏–π DOM —Å–æ–±—ã—Ç–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ
	 * @param {string} newType - –Ω–æ–≤–æ–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è
	 */
	public remit(newType: string) {
		const admin = this[ADMINISTRATOR_KEY];

		if (admin.remitHandlers[newType]) {
			return admin.remitHandlers[newType];
		}

		newType = newType.toLowerCase();
		const this_ = this;

		// TODO: –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è?
		const remitImpl = function $remit(event: Event) {
			event.stopPropagation();
			this_.broadcast(newType, {originalEvent: event});
		};

		admin.remitHandlers[newType] = remitImpl;

		return remitImpl;
	}

	public set(newAttrs: Partial<IAttrs<P>>) {
		const mark = DevTools.mark(`üéì ${DevTools.getName(this)}: set`);

		// –≠—Ç–æ –≤—Å—ë –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ action –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —Ç–∞–∫ —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è
		// –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ (–µ—Å–ª–∏ –±—É–¥–µ—Ç –≤–æ–æ–±—â–µ)

		// tslint:disable-next-line:forin
		for (const name in newAttrs) {
			this.attrs[name] = newAttrs[name];
		}

		mark.measure();
	}

	protected createFragment(renderContext: IRenderContext) {
		const admin = this[ADMINISTRATOR_KEY];

		pushActiveInstance(this);
		admin.renderContext = renderContext;

		const mark = DevTools.mark(`üéì ${DevTools.getName(this)}: render`);

		const virtualNode = this.render();

		mark.measure();

		admin.renderContext = undefined;
		// TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã–π —Å—Ç–µ–∫
		popActiveInstance();

		admin.keyStore.clear();

		// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞
		addVirtualEventListener(
			virtualNode,
			"$destroyed",
			admin.handleVirtualEvent,
		);

		// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∞
		// –ù—É–∂–Ω–æ, —á—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π virtualNode
		addVirtualEventListener(
			virtualNode,
			"$changed",
			admin.handleVirtualEvent,
		);

		virtualNode.component = this;
		virtualNode.key = admin.key;

		admin.virtualNode = virtualNode;
	}

}
