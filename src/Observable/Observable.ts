import {
	ATTRS_KEY as attrsKey,
	ADMINISTRATOR_KEY as administratorKey,
	VIEWS_KEY as viewsKey,
	OBSERVER_ID_KEY as observerId,
	REACTION_KEY as reactionKey,
	DISPOSED_KEY as disposedKey,
} from "../utils/observableKeys";
import {assert} from "../utils/assert";
import {makeObservableAdministrator} from "../ObservableAdministrator/ObservableAdministrator";
import {isSymbol} from "../utils/symbol";
import {DevTools} from "../utils/devTools";

const observers = {};
const observableStack = [];
let lastObservableId = 1;
let actionCount = 0;
let viewComputationStack = 0;

interface IViewData {
	cached: any;
	observer: ((...args: any) => any);
	valid: boolean;
	getter?: (() => any);
}

function makeView(object, name, view, asMethod) {
	// –û–ø–∏—Å–∞–Ω–∏–µ view
	const viewData: IViewData = object[viewsKey][name] = {
		cached: null,
		observer: null,
		valid: false,
	};

	// –†–µ–∞–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–µ—à
	const clearReaction = function $clearReaction() {
		viewData.cached = null;
		viewData.valid = false;

		// –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
		viewComputationStack++;
		object[administratorKey].reactHook(name, viewData.cached, viewComputationStack, actionCount);
		viewComputationStack--;
	};

	// –†–µ–∞–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –∑–∞–Ω–æ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–ª–∞–¥—ë—Ç –≤ –∫–µ—à
	const computeReaction = function $computeReaction() {
		viewData.cached = view.apply(object, arguments);
		// –í–∞–ª–∏–¥–Ω—ã–º–∏ –≤ –∫–µ—à–µ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
		viewData.valid = arguments.length === 0;
	};

	const viewObserver = viewData.observer = createObserver(clearReaction);

	// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è view
	viewData.getter = function $view() {
		// –ï—Å–ª–∏ –∫–µ—à –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –≤—ã–∑–æ–≤–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π observer, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –∑–∞–Ω–æ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–ª–æ–∂–∏—Ç –≤ –∫–µ—à
		if (!viewData.valid) {
			setObserverReaction(viewObserver, computeReaction);
			viewObserver.apply(this, arguments);
			setObserverReaction(viewObserver, clearReaction);
		}

		// –í–æ–∑–≤—Ä–∞—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
		return viewData.cached;
	};

	if (asMethod) {
		// –î–µ–ª–∞–µ–º –º–µ—Ç–æ–¥
		Object.defineProperty(object, name, {
			enumerable: false,
			value: viewData.getter,
			writable: false,
		});
	} else {
		// –î–µ–ª–∞–µ–º –∞—Ç–æ–º-–∑–∞–≥–ª—É—à–∫—É
		makeAtom(object, name, null);
	}
}

export function makeAtom(object, name, defaultValue) {
	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	object[attrsKey][name] = defaultValue;

	Object.defineProperty(object, name, {
		configurable: true,

		get() {
			assert(
				!object[disposedKey],
				"Cannot read from a disposed object!",
			);

			const administrator = object[administratorKey];
			return administrator.trackHook(name);
		},

		set(value) {
			assert(
				!object[disposedKey],
				"Cannot mutate a disposed object!",
			);

			const attrs = object[attrsKey];
			const views = object[viewsKey];
			const administrator = object[administratorKey];

			// –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å computed-—Å–≤–æ–π—Å—Ç–≤–æ
			assert(
				!views[name],
				`Cannot mutate view '${name}'!`,
			);

			// –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å
			if (attrs[name] === value) {
				return;
			}

			administrator.reactHook(name, value, viewComputationStack, actionCount);
		},
	});
}

export function removeAtom(object, name) {
	// –£–¥–∞–ª—è–µ–º —Å—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	delete object[attrsKey][name];
	// –£–¥–∞–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
	delete object[name];
}

export function invokeInActionContext(object, func, args) {
	let mark = DevTools.mark(`üéì Action ${func.name}`);

	actionCount++;
	const result = func.apply(object, args);
	actionCount--;

	mark.measure();

	// –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—à–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
	if (!actionCount) {
		mark = DevTools.mark(`üéì Action ${func.name}: reaction`);

		object[administratorKey].callReactionsHook();

		mark.measure();
	}

	return result;
}

export function createAction(object, action): (...args: any[]) => any {
	return function $action() {
		return invokeInActionContext(object, action, arguments);
	};
}

export function createAsyncAction(object, generator: GeneratorFunction) {
	return async function $asyncAction(...args: any[]) {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä
		const iterator = generator.apply(this, args);
		let yielded;
		let yieldedResult;

		do {
			// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–æ —ç–∫—à–Ω
			yielded = invokeInActionContext(
				object,
				() => iterator.next(yieldedResult),
				[],
			);

			if (yielded.value instanceof Promise) {
				yieldedResult = await yielded.value;
			}
		} while (!yielded.done);
	};
}

/**
 * –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ Observable
 * @param object
 * @param [keys]
 */
export function createObservable(object, keys?) {
	assert(
		object && typeof object === "object",
		`Expected an object, bun got '${typeof object}'`,
	);

	assert(
		!object[disposedKey],
		`Cannot create observable over a disposed object!`,
	);

	assert(
		!object[administratorKey],
		`Cannot create observable on top of another observable!`,
	);

	object[attrsKey] = {};
	object[viewsKey] = {};
	object[administratorKey] = makeObservableAdministrator(object, observableStack, observers);

	keys = keys || Object.keys(object);
	let descriptor;

	// –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º –æ–±—ä–µ–∫—Ç–∞
	for (const key of keys) {
		if (isSymbol(key)) {
			continue;
		}

		descriptor = Object.getOwnPropertyDescriptor(object, key);

		if (descriptor.get) {
			// View –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (computed property)
			makeView(object, key, descriptor.get, false);
		} else {
			// –ê—Ç–æ–º (–æ–±—ã—á–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç)
			makeAtom(object, key, descriptor.value);
		}
	}

	return object;
}

/**
 * –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ observer
 * @param reaction
 */
export function createObserver(reaction) {
	assert(
		typeof reaction === "function",
		`Expected function, but got '${typeof reaction}'`,
	);

	const id = lastObservableId++;

	const observe = function $observe() {
		observableStack.push(id);
		const result = observe[reactionKey].apply(this, arguments);
		observableStack.pop();

		return result;
	};

	// –°–æ—Ö—Ä–∞–Ω–∏–º observer –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ
	observers[id] = observe;
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º id observer-–∞
	observe[observerId] = id;
	observe[reactionKey] = reaction;

	return observe;
}

function disposeObserver(observe) {
	setObserverReaction(observe, function $disposedObserverGuardReaction() {
		throw new Error("Attempt to call a disposed observer!");
	});

	observers[observe[observerId]] = null;
}

function setObserverReaction(observe, reaction) {
	observe[reactionKey] = reaction;
}

/**
 * –û—Ç–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
 * @param object
 */
export function dispose(object: object | ((...args: any) => any)) {
	if (typeof object === "function") {
		// –°–Ω–∏–º–∞–µ–º observer
		disposeObserver(object);
		return;
	}

	if (!object || typeof object !== "object" || !object[viewsKey]) {
		return;
	}

	// –°–Ω–∏–º–∞–µ–º observers –æ—Ç views
	Object.keys(object[viewsKey]).forEach((name) => {
		const viewData = object[viewsKey][name];
		disposeObserver(viewData.observer);
	});

	// –í—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ disposed
	object[disposedKey] = true;
}

export function createObservableView(object, name, view) {
	return makeView(object, name, view, true);
}

export function getAllObservers() {
	return observers;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –æ–±—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param object
 * @param name
 */
export function getRawAtomValue(object, name) {
	return object[attrsKey][name];
}
